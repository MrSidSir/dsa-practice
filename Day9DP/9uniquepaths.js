// ЁЯФз Problem: Unique ways to reach bottom-right in m x n grid
// ЁЯУЦ Algorithm: Dynamic Programming (Bottom-up approach)
// ЁЯОп Time Complexity: O(m*n), Space Complexity: O(n)

function uniquePaths(m, n) {
  // ЁЯПЧя╕П Initialize: Create 1D array representing first row, all paths = 1
  // рдХреНрдпреЛрдВ 1? рдХреНрдпреЛрдВрдХрд┐ first row рдореЗрдВ рдЬрд╛рдиреЗ рдХрд╛ рд╕рд┐рд░реНрдл рдПрдХ рд╣реА рддрд░реАрдХрд╛ рд╣реИ (рд╕рд┐рд░реНрдл right рдЬрд╛рдирд╛)
  let dp = Array(n).fill(1);
  
  // ЁЯФД Process each row starting from second row (i=1)
  for(let i = 1; i < m; i++) {
    // ЁЯФД Process each column starting from second column (j=1)
    for(let j = 1; j < n; j++) {
      // ЁЯзй Core Logic: dp[j] += dp[j-1]
      // dp[j] = current cell рдХреЗ paths (рдкрд╣рд▓реЗ рд╕реЗ stored - top рд╕реЗ рдЖрдиреЗ рд╡рд╛рд▓реЗ)
      // dp[j-1] = left cell рдХреЗ paths
      // Total paths = top рд╕реЗ рдЖрдиреЗ рд╡рд╛рд▓реЗ + left рд╕реЗ рдЖрдиреЗ рд╡рд╛рд▓реЗ
      dp[j] += dp[j-1];
    }
    
    // ЁЯУК Debug: Current row state after processing
    console.log(`Row ${i} processed: [${dp.join(', ')}]`);
  }
  
  // ЁЯОп Return: Bottom-right corner рдХрд╛ total paths
  return dp[n-1];
}

// ЁЯзк Test Example: 3x7 grid
console.log("=== 3x7 Grid Path Calculation ===");
console.log("Initial state: [1, 1, 1, 1, 1, 1, 1]");
let result = uniquePaths(3, 7);
console.log(`\nЁЯПЖ Final Answer: ${result} unique paths`);

// ЁЯУЪ Step-by-step breakdown for 3x3 grid (easier to visualize)
console.log("\n=== 3x3 Grid Step-by-step ===");
function uniquePathsDetailed(m, n) {
  console.log(`Grid size: ${m}x${n}`);
  let dp = Array(n).fill(1);
  console.log(`Initial (Row 0): [${dp.join(', ')}]`);
  
  for(let i = 1; i < m; i++) {
    console.log(`\nProcessing Row ${i}:`);
    for(let j = 1; j < n; j++) {
      let oldValue = dp[j];
      let leftValue = dp[j-1];
      dp[j] += dp[j-1];
      console.log(`  Cell(${i},${j}): ${oldValue} + ${leftValue} = ${dp[j]}`);
    }
    console.log(`  Row ${i} complete: [${dp.join(', ')}]`);
  }
  
  return dp[n-1];
}

uniquePathsDetailed(3, 3);

// ЁЯМН Real-world Applications:
console.log("\nЁЯМН === REAL-WORLD APPLICATIONS ===");
console.log(`
ЁЯдЦ ROBOTICS & AUTOMATION:
   тАв Robot path planning in grid-based environments
   тАв Warehouse automation - optimal route counting
   тАв Drone navigation in structured airspace
   тАв Autonomous vehicle route optimization

ЁЯОо GAME DEVELOPMENT:
   тАв Chess/Board game move calculations
   тАв Strategy game AI - possible move paths
   тАв Puzzle game level design
   тАв RPG character movement options

ЁЯТ░ FINANCE & ECONOMICS:
   тАв Portfolio optimization paths
   тАв Market trend analysis routes
   тАв Risk assessment scenarios
   тАв Trading strategy combinations

ЁЯПЧя╕П ENGINEERING & CONSTRUCTION:
   тАв Circuit board routing paths
   тАв Building evacuation route planning
   тАв Network topology design
   тАв Pipeline layout optimization

ЁЯУК DATA SCIENCE:
   тАв Feature selection combinations
   тАв Model hyperparameter tuning paths
   тАв Decision tree path counting
   тАв Markov chain state transitions

ЁЯзм BIOINFORMATICS:
   тАв DNA sequence alignment paths
   тАв Protein folding route analysis
   тАв Genetic algorithm pathfinding
   тАв Evolutionary pathway modeling
`);

// ЁЯФН Algorithm Variants:
console.log("\nЁЯФН === ALGORITHM VARIANTS ===");
console.log(`
ЁЯУИ SPACE-OPTIMIZED VERSION (Current):
   тАв Uses O(n) space instead of O(m*n)
   тАв Same time complexity but memory efficient
   тАв Perfect for large grids

ЁЯОп MATHEMATICAL FORMULA VERSION:
   тАв Uses combinatorics: C(m+n-2, m-1)
   тАв O(1) space, O(min(m,n)) time
   тАв Best for very large grids

ЁЯЫгя╕П WITH OBSTACLES VERSION:
   тАв Handles blocked cells in grid
   тАв More complex DP transitions
   тАв Real-world path planning scenarios
`);

// ЁЯза Core Concept Explanation:
console.log("\nЁЯза === CORE CONCEPT ===");
console.log(`
рдпрд╣ algorithm Dynamic Programming рдХрд╛ classic example рд╣реИ:

1я╕ПтГг PROBLEM BREAKDOWN:
   тАв Grid рдореЗрдВ (0,0) рд╕реЗ (m-1,n-1) рддрдХ рдЬрд╛рдирд╛ рд╣реИ
   тАв рд╕рд┐рд░реНрдл RIGHT рдпрд╛ DOWN move рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ
   тАв рдХреБрд▓ рдХрд┐рддрдиреЗ unique paths рд╣реИрдВ?

2я╕ПтГг DP APPROACH:
   тАв рдЫреЛрдЯреЗ subproblems solve рдХрд░рдХреЗ рдмрдбрд╝рд╛ problem solve рдХрд░рддреЗ рд╣реИрдВ
   тАв рд╣рд░ cell рдореЗрдВ рдЙрд╕ рддрдХ рдкрд╣реБрдВрдЪрдиреЗ рдХреЗ total ways store рдХрд░рддреЗ рд╣реИрдВ
   тАв Current cell = Top cell ways + Left cell ways

3я╕ПтГг SPACE OPTIMIZATION:
   тАв рдкреВрд░рд╛ 2D array рдмрдирд╛рдиреЗ рдХреА рдЬрд░реВрд░рдд рдирд╣реАрдВ
   тАв рд╕рд┐рд░реНрдл current row track рдХрд░рдирд╛ рдХрд╛рдлреА рд╣реИ
   тАв Previous row рдХреА values рдХреЛ overwrite рдХрд░рддреЗ рдЬрд╛рддреЗ рд╣реИрдВ
`);